---
- name: Wait for SSH to come up
  wait_for_connection:
    delay: 10
    timeout: 360

- name: Update system packages
  yum:
    name: "*"
    state: latest
    update_cache: yes
  register: update_task_result

- name: Enable RDO Repo
  yum:
    name: "{{ openstack_repo_link }}"
    state: latest
    disable_gpg_check: yes

- name: Install Keystone server packages
  yum:
    name: "{{ keystone_server_pkgs }}"
    state: present
  delay: 10
  register: result
  retries: 3
  until: result is succeeded

- name: Disable SELinux
  selinux:
    state: disabled
      
- name: Reboot immediately if there were new packages installed
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0
  when: update_task_result is changed

- name: Wait for the reboot to complete if there were new packages installed
  wait_for_connection:
    connect_timeout: 20
    sleep: 5
    delay: 5
    timeout: 300
  when: update_task_result is changed
  delay: 10
  register: wait_result
  retries: 3
  until: wait_result is succeeded

- name: Collect facts
  ansible.builtin.setup:

- name: Connect to new instance and set hostname
  hostname:
    name: "{{ keystone_hostname }}.{{ aws_guid_public_zone_name }}"

- name: Set /etc/hosts file
  copy:
    dest: "/etc/hosts"
    content: |
      127.0.0.1 localhost localdomain
      {{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }} {{ keystone_hostname }}.{{ aws_guid_public_zone_name }} {{ aws_guid_public_zone_name }}

- name: Start firewalld
  service:
    name: firewalld
    state: started
    enabled: true

- name: Connect to Keystone server and set firewall
  ansible.posix.firewalld:
    permanent: yes
    immediate: yes
    state: enabled
    service: "{{ item }}"
  with_items:
    - ssh
    - https
    - http

- name: Connect to Keystone server and set firewall for port 8080
  ansible.posix.firewalld:
    permanent: yes
    immediate: yes
    state: enabled
    port: "{{ port_item }}/tcp"
  loop_control:
    loop_var: port_item
  loop:
    - 8080

- name: Enable MariaDB
  service:
    name: mariadb
    state: started
    enabled: yes

- name: Create Keystone Database
  shell: "mysql -u root -e 'CREATE DATABASE {{ keystone_database_name }};'"
  args:
    creates: "/var/lib/mysql/{{ keystone_database_name }}"

- name: Create Keystone User
  shell: "mysql -u root -e 'CREATE USER {{ keystone_database_user }}@localhost IDENTIFIED BY \'{{ keystone_database_pass }}\'; GRANT ALL PRIVILEGES ON {{ keystone_database_name }}.* TO \'{{ keystone_database_user }}\'@\'localhost\'; GRANT ALL PRIVILEGES ON {{ keystone_database_name }}.* TO \'{{ keystone_database_user }}\'@\'%\'; FLUSH PRIVILEGES;' && touch /var/lib/mysql/{{ keystone_database_user }}"
  args:
    creates: "/var/lib/mysql/{{ keystone_database_user }}"